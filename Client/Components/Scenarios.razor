@using Tradibit.SharedUI.DTO.Dashboard
@using Tradibit.SharedUI.DTO.Primitives
@using Tradibit.SharedUI.DTO.Scenarios
@using Tradibit.SharedUI.Interfaces
@using Tradibit.SharedUI.Interfaces.API

@inject RequestExt RequestExt
@inject IStrategiesApi StrategiesApi
@inject ITokenProvider TokenProvider

<RadzenPanel AllowCollapse="@false">
    <HeaderTemplate>Add Scenario</HeaderTemplate>
    <ChildContent>
        <RadzenDropDown 
            
            AllowClear="true"
            TValue="Guid"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
            AllowFiltering="@true"
            Class="w-100" 
            Placeholder="Select..."
            Data=@_availableStrategies
            TextProperty="Name" 
            ValueProperty="Id"
            Change="@(guid => SelectStrategy((Guid)guid))" />
                    
    </ChildContent>
</RadzenPanel>

<RadzenButton Click="@(async () => await AddStrategy())" Text="Add" ButtonStyle="ButtonStyle.Primary" />

@code {

    private Guid? _selectedStrategyId;
    private List<IdName>? _availableStrategies;

    [Parameter]
    public List<ScenarioDto> ScenarioDtos { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _availableStrategies = await RequestExt.Send(async () => await StrategiesApi.GetAvailableStrategies(new GetAvailableStrategiesRequest()));
    }

    private void SelectStrategy(Guid strategyId)
    {
        _selectedStrategyId = strategyId;
    }
    
    private async Task AddStrategy(CancellationToken cancellationToken = default)
    {
        if (!_selectedStrategyId.HasValue)
            return;
        
        var addStrategyToUser = new AddStrategyToUserRequest(await TokenProvider.GetCurrentUserId(cancellationToken), _selectedStrategyId.Value);
        await RequestExt.Send(async () => await StrategiesApi.AddStrategyToUser(addStrategyToUser));
    }
}
