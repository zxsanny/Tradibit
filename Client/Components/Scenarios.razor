@using Tradibit.SharedUI.DTO.Dashboard
@using Tradibit.SharedUI.DTO.Primitives
@using Tradibit.SharedUI.DTO.Scenarios
@using Tradibit.SharedUI.Interfaces.API

@inject RequestExt RequestExt
@inject IScenariosApi ScenariosApi

<RadzenPanel AllowCollapse="@false">
    <HeaderTemplate>Add Scenario</HeaderTemplate>
    <ChildContent>
        <RadzenDropDown 
            
            AllowClear="true"
            TValue="Guid"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
            AllowFiltering="@true"
            Class="w-100" 
            Placeholder="Select..."
            Data=@_availableStrategies
            TextProperty="Name" 
            ValueProperty="Id"
            Change="@(async guid => await SelectStrategy((Guid)guid)))" />
                    
    </ChildContent>
</RadzenPanel>

<RadzenButton Click=@AddStrategy() Text="Add" ButtonStyle="ButtonStyle.Primary" />

@code {

    private List<IdName>? _availableStrategies;

    [Parameter]
    public List<ScenarioDto> ScenarioDtos { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _availableStrategies = await RequestExt.Send(async () => await ScenariosApi.GetAvailableStrategies(new GetAvailableStrategiesRequest()));
    }

    private async Task AddStrategy(Guid strategyId)
    {
        await RequestExt.Send(async () => await ScenariosApi.AddStrategyToUser(new AddStrategyToUserRequest()));
    }

    private async Task SelectStrategy(Guid guid)
    {
        throw new NotImplementedException();
    }

}
